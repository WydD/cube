<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 
<html><head> 
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"> 
<title>Square-1 scrambler</title> 
<!--<script type="text/javascript" src="raphael-min.js"></script>-->
<script language="JavaScript" type="text/javascript">
<!--
/* Javascript written by Jaap Scherphuis,  jaapsch a t yahoo d o t com */
var seqlen=4;
var numcub=5;
var colorString = "yobwrg";  //In dlburf order. May use any colours in colorList below
var seq=new Array();    // move sequences
var posit;    // piece array
var states=new Array();
//iexplore "/Users/petitl/Sites/cube/scrambler/wca-sq1/scramble_square1_2010_wydd.htm"
/*function parse() {
    var s="";

    var urlquery=window.location.href.split("?");
    if(urlquery.length>1){
        var urlterms=urlquery[1].split("&");
        for( var i=0; i<urlterms.length; i++){
            var urllr=urlterms[i].split("=");
            if(urllr[0]=="len") {
                if(urllr[1]-0 >= 1 ) seqlen=urllr[1]-0;
            } else if(urllr[0]=="num"){
                if(urllr[1]-0 >= 1 ) numcub=urllr[1]-0;
            } else if(urllr[0]=="col") {
		if(urllr[1].length==6) colorString = urllr[1];
	    }
        }
    }    
}

parse();   */

function scramble(){
    var i,j,ls,n,f, sequ;
    for( n=0; n<numcub; n++){
        posit = new Array(0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14, 15, 15);
        ls = -1;
        sequ = new Array();
        f = 0;
        for (i = 0; i < seqlen; i++) {
            do{
                if (ls == 0) {
                    j = Math.floor(Math.random() * 22) - 11;
                    if (j >= 0) j++;
                } else if (ls == 1) {
                    j = Math.floor(Math.random() * 12) - 11;
                } else if (ls == 2) {
                    j = 0;
                } else {
                    j = Math.floor(Math.random() * 23) - 11;
                }
                // if past second twist, restrict bottom layer
            } while ((f > 1 && j >= -6 && j < 0) || domove(j));
            if (j > 0) ls = 1;
            else if (j < 0) ls = 2;
            else {
                ls = 0;
                f++;
            }
            sequ[i] = j;
        }
        seq[n] = sequ;
	states[n] = posit;
    }
}
function scramblestring(n){
    var s="",i,k,l=-1;
    for(i=0; i<seq[n].length; i++){
        k=seq[n][i];
        if(k==0){
            if(l==-1) s+="(0,0)  ";
            if(l==1) s+="0)  ";
            if(l==2) s+=")  ";
            l=0;
        }else if(k>0){
            s+= "(" + (k>6?k-12:k)+",";
            l=1;
        }else if(k<0){
            if(l<=0) s+="(0,";
            s+=(k<=-6?k+12:k);
            l=2;
        }
    }
    if(l==1) s+="0";
    if(l!=0) s+=") (0,0)";
    return s;
}

 
function domove(m){
        var i,c,t,f = m;
        //do move f
        if (f == 0) {
            for (i = 0; i < 6; i++) {
                c = posit[i + 12];
                posit[i + 12] = posit[i + 6];
                posit[i + 6] = c;
            }
        } else if (f > 0) {
            f = 12 - f;
            if (posit[f] == posit[f - 1]) return true;
            if (f < 6 && posit[f + 6] == posit[f + 5]) return true;
            if (f > 6 && posit[f - 6] == posit[f - 7]) return true;
            if (f == 6 && posit[0] == posit[11]) return true;
            t = new Array();
            for (i = 0; i < 12; i++) t[i] = posit[i];
            c = f;
            for (i = 0; i < 12; i++) {
                posit[i] = t[c];
                if (c == 11)c = 0; else c++;
            }
        } else if (f < 0) {
            f = -f;
            if (posit[f + 12] == posit[f + 11]) return true;
            if (f < 6 && posit[f + 18] == posit[f + 17]) return true;
            if (f > 6 && posit[f + 6] == posit[f + 5]) return true;
            if (f == 6 && posit[12] == posit[23]) return true;
            t = new Array();
            for (i = 0; i < 12; i++) t[i] = posit[i + 12];
            c = f;
            for (i = 0; i < 12; i++) {
                posit[i + 12] = t[c];
                if (c == 11)c = 0; else c++;
            }
        }
        return false;
}                /*
 
function colorSet(col) {
	if (col=="r") return("#FF0000");
	if (col=="o") return("#FF8000");
	if (col=="b") return("#0000FF");
	if (col=="g") return("#00FF00");
	if (col=="y") return("#FFFF00");
	if (col=="w") return("#FFFFFF");
    return "#ffffff";
}

//mathy helper functions
var radius, angles, angles2;
function cos1(index) {return Math.cos(angles[index])*radius;}
function sin1(index) {return Math.sin(angles[index])*radius;}
function cos2(index) {return Math.cos(angles2[index])*radius;}
function sin2(index) {return Math.sin(angles2[index])*radius;}

Raphael.fn.fillPolygon = function(arrx, arry, stroke, fill) {
	var path = "";
	for(var n = 0 ; n < arrx.length ; n++) {
		path += (n==0 ? "M" : "L")+arrx[n]+" "+arry[n];
	}
	path += "z";
	this.path(path)
		.attr("fill", fill)
		.attr("stroke", stroke);
};
 
function drawSq(stickers, shapes, canvas) {
	var z = 1.366; // sqrt(2) / sqrt(1^2 + tan(15 degrees)^2)
	var jg = new Raphael(canvas, 200, 100);
	var arrx, arry;
 
	var margin = 1;
	var sidewid=.15*100/z;
	var centerx = 50;
	var centery = 50;
	radius=(centerx-margin-sidewid*z)/z;
	var w = (sidewid+radius)/radius;		// ratio btw total piece width and radius
 
	angles=[0,0,0,0,0,0,0,0,0,0,0,0,0];
	angles2=[0,0,0,0,0,0,0,0,0,0,0,0,0];
 
	//initialize angles
	for(foo=0; foo<24; foo++){
		angles[foo]=(17-foo*2)/12*Math.PI;
		shapes = shapes.concat("xxxxxxxxxxxxxxxx");
	}
	for(foo=0; foo<24; foo++){
		angles2[foo]=(19-foo*2)/12*Math.PI;
		shapes = shapes.concat("xxxxxxxxxxxxxxxx");
	}
 
	//fill and outline first layer
	var shapecounter = 0;
	for(foo=0; shapecounter<12; foo++){
		if (shapes.length<=foo) shapecounter = 12;
		if (shapes.charAt(foo)=="x") shapecounter++;
		if (shapes.charAt(foo)=="c"){
			arrx=[centerx, centerx+cos1(shapecounter), centerx+cos1(shapecounter+1)*z, centerx+cos1(shapecounter+2)];
			arry=[centery, centery-sin1(shapecounter), centery-sin1(shapecounter+1)*z, centery-sin1(shapecounter+2)];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(foo)));
	
			arrx=[centerx+cos1(shapecounter), centerx+cos1(shapecounter+1)*z, centerx+cos1(shapecounter+1)*w*z, centerx+cos1(shapecounter)*w];
			arry=[centery-sin1(shapecounter), centery-sin1(shapecounter+1)*z, centery-sin1(shapecounter+1)*w*z, centery-sin1(shapecounter)*w];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(16+shapecounter)));
		
			arrx=[centerx+cos1(shapecounter+2), centerx+cos1(shapecounter+1)*z, centerx+cos1(shapecounter+1)*w*z, centerx+cos1(shapecounter+2)*w];
			arry=[centery-sin1(shapecounter+2), centery-sin1(shapecounter+1)*z, centery-sin1(shapecounter+1)*w*z, centery-sin1(shapecounter+2)*w];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(17+shapecounter)));
 
			shapecounter +=2;
		}
		if (shapes.charAt(foo)=="e"){
			arrx=[centerx, centerx+cos1(shapecounter), centerx+cos1(shapecounter+1)];
			arry=[centery, centery-sin1(shapecounter), centery-sin1(shapecounter+1)];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(foo)));
	
			arrx=[centerx+cos1(shapecounter), centerx+cos1(shapecounter+1), centerx+cos1(shapecounter+1)*w, centerx+cos1(shapecounter)*w];
			arry=[centery-sin1(shapecounter), centery-sin1(shapecounter+1), centery-sin1(shapecounter+1)*w, centery-sin1(shapecounter)*w];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(16+shapecounter)));
	
			shapecounter +=1;
		}
	}
 
	//fill and outline second layer
	centerx += 100;  
	shapecounter = 0;
	for(shapecounter=0; shapecounter<12; foo++){
		if (shapes.length<=foo) shapecounter = 12;
		if (shapes.charAt(foo)=="x") shapecounter++;
		if (shapes.charAt(foo)=="c"){
			arrx=[centerx, centerx+cos2(shapecounter), centerx+cos2(shapecounter+1)*z, centerx+cos2(shapecounter+2)];
			arry=[centery, centery-sin2(shapecounter), centery-sin2(shapecounter+1)*z, centery-sin2(shapecounter+2)];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(foo)));
 
			arrx=[centerx+cos2(shapecounter), centerx+cos2(shapecounter+1)*z, centerx+cos2(shapecounter+1)*w*z, centerx+cos2(shapecounter)*w];
			arry=[centery-sin2(shapecounter), centery-sin2(shapecounter+1)*z, centery-sin2(shapecounter+1)*w*z, centery-sin2(shapecounter)*w];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(28+shapecounter)));
	
			arrx=[centerx+cos2(shapecounter+2), centerx+cos2(shapecounter+1)*z, centerx+cos2(shapecounter+1)*w*z, centerx+cos2(shapecounter+2)*w];
			arry=[centery-sin2(shapecounter+2), centery-sin2(shapecounter+1)*z, centery-sin2(shapecounter+1)*w*z, centery-sin2(shapecounter+2)*w];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(29+shapecounter)));
	 
			shapecounter +=2;
 
		}
		if (shapes.charAt(foo)=="e"){
			arrx=[centerx, centerx+cos2(shapecounter), centerx+cos2(shapecounter+1)];
			arry=[centery, centery-sin2(shapecounter), centery-sin2(shapecounter+1)];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(foo)));
	
			arrx=[centerx+cos2(shapecounter), centerx+cos2(shapecounter+1), centerx+cos2(shapecounter+1)*w, centerx+cos2(shapecounter)*w];
			arry=[centery-sin2(shapecounter), centery-sin2(shapecounter+1), centery-sin2(shapecounter+1)*w, centery-sin2(shapecounter)*w];
			jg.fillPolygon(arrx, arry, "#000000", colorSet(stickers.charAt(28+shapecounter)));
 
		 	shapecounter +=1;
		}
	}
}
          */
//-->
</script> 
</head> 
<body bgcolor="white"> 
            
<form name="frm"> 
<table border=1 cellpadding=0 cellspacing=0 width="100%"> 
<tr> 
 
<td colspan=2 bgcolor='#00c0c0'> 
    <table width="100%"> 
    <tr> 
        <td><font face="Arial" size=3>Number of scrambles:</font><input name=num size=4 maxlength=2 /></td>
        <td><font face="Arial" size=3>Scramble length:</font><input name=len size=4 maxlength=3 /></td>
	<td><font face='Arial' size=3>Colours (DLBURF):</font><input name=col size=6 maxlength=6 /></td> 
    <td><input type="submit" value="Scramble!"></td> 
    </tr> 
    </table> 
</td> 
</tr> 

<script language="JavaScript" type="text/javascript"> 
<!--
document.frm.len.value=seqlen;
document.frm.num.value=numcub;
document.frm.col.value=colorString;
 
 
function remove_duplicates(arr)
{
	var out = [];
	var j=0;
	for (var i=0; i<arr.length; i++)
	{
		if(i==0 || arr[i]!=arr[i-1])
		out[j++] = arr[i];
	}
	return out;
}
 
//var tb = ["y","y","y","y","y","y","y","y","w","w","w","w","w","w","w","w"];
var tb = ["3","3","3","3","3","3","3","3","0","0","0","0","0","0","0","0"];
var ty = ["c","e","c","e","c","e","c","e","e","c","e","c","e","c","e","c"];
//var col = ["rb","b","bo","o","og","g","gr","r","r","rg","g","go","o","ob","b","br"];
var col = ["51","1","12","2","24","4","45","5","5","54","4","42","2","21","1","15"];

//dlburf

scramble();     /*
for(var i=0; i<numcub; i++){
	posit = states[i];
	var top_side=remove_duplicates(posit.slice(0,12));
	var bot_side=remove_duplicates(posit.slice(18,24).concat(posit.slice(12,18)));
	var eido=top_side.concat(bot_side);
	a="";
	b="";
	c="";
	eq="_";
	for(var j=0; j<16; j++)
	{
		a+=ty[eido[j]];
		eq=eido[j];
		b+=tb[eido[j]];
		c+=col[eido[j]];
	}
	var stickers = (b.concat(c)).replace(/0/g,colorString[0]).replace(/1/g,colorString[1]).replace(/2/g,colorString[2]).replace(/3/g,colorString[3]).replace(/4/g,colorString[4]).replace(/5/g,colorString[5]);
    //var url="<script type='text/javascript'>drawSq(\"" + stickers + "\",\"" + a + "\",\"" + "scramble" + i + "\");<\/script>";
	//document.write( "<tr><td><font face='Arial' size=3><b>&nbsp;&nbsp;" + scramblestring(i) + "<\/b><\/font><\/td><td>"
	//	+ "<div style='position:relative;height:100px;width:200px;' id='scramble" + i + "'>&nbsp;</div>" + "" + "<\/td><\/tr>");
		//drawSq(stickers, a, "scramble"+i);
}*/
//-->
</script>
</table></form> 
<font face='Arial' size=2>version: November 29, 2009</font>
</body> 
</html> 